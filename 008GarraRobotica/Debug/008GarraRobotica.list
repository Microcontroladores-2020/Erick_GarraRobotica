
008GarraRobotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d50  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ee8  08000ef0  00010ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ee8  08000ee8  00010ef0  2**0
                  CONTENTS
  4 .ARM          00000000  08000ee8  08000ee8  00010ef0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ee8  08000ef0  00010ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ee8  08000ee8  00010ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000eec  08000eec  00010eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000ef0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000ef0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010ef0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b8e  00000000  00000000  00010f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000297  00000000  00000000  00011aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000f0  00000000  00000000  00011d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b8  00000000  00000000  00011e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000db9f  00000000  00000000  00011ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000b3d  00000000  00000000  0001fa8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004f1d7  00000000  00000000  000205cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006f7a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000370  00000000  00000000  0006f820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000ed0 	.word	0x08000ed0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000ed0 	.word	0x08000ed0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	0000      	movs	r0, r0
	...

08000a18 <main>:
//coeficiente de correcao do da funcao delay já ajustado com valores reais no osciloscopio
const float coef = 2.8;


int main(void)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
	//volatile uint8_t cont = 3;
	uint32_t tempo = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
	init_gpio();
 8000a22:	f000 f953 	bl	8000ccc <init_gpio>
	init_pwm();
 8000a26:	f000 f96f 	bl	8000d08 <init_pwm>

	while(1){
		//PINO C1 gerando pulso de 10us
		GPIOC->ODR &= ~(0x1<<1);
 8000a2a:	4b7f      	ldr	r3, [pc, #508]	; (8000c28 <main+0x210>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a7e      	ldr	r2, [pc, #504]	; (8000c28 <main+0x210>)
 8000a30:	f023 0302 	bic.w	r3, r3, #2
 8000a34:	6153      	str	r3, [r2, #20]
		usdelay(3);
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 f904 	bl	8000c44 <usdelay>
		GPIOC->ODR |= 0x1<<1;
 8000a3c:	4b7a      	ldr	r3, [pc, #488]	; (8000c28 <main+0x210>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	4a79      	ldr	r2, [pc, #484]	; (8000c28 <main+0x210>)
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	6153      	str	r3, [r2, #20]
		usdelay(10);
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f000 f8fb 	bl	8000c44 <usdelay>
		GPIOC->ODR &= ~(0x1<<1);
 8000a4e:	4b76      	ldr	r3, [pc, #472]	; (8000c28 <main+0x210>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a75      	ldr	r2, [pc, #468]	; (8000c28 <main+0x210>)
 8000a54:	f023 0302 	bic.w	r3, r3, #2
 8000a58:	6153      	str	r3, [r2, #20]

		//espera receber echo (borda de subida echo)
		while(!(GPIOC->IDR & 0x1));
 8000a5a:	bf00      	nop
 8000a5c:	4b72      	ldr	r3, [pc, #456]	; (8000c28 <main+0x210>)
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d0f9      	beq.n	8000a5c <main+0x44>

		tempo = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
		//leitura GPIO2 do echo com contagem
		while(GPIOC->IDR & 0x1){
 8000a6c:	e005      	b.n	8000a7a <main+0x62>
			usdelay(2);
 8000a6e:	2002      	movs	r0, #2
 8000a70:	f000 f8e8 	bl	8000c44 <usdelay>
			tempo++;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3301      	adds	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
		while(GPIOC->IDR & 0x1){
 8000a7a:	4b6b      	ldr	r3, [pc, #428]	; (8000c28 <main+0x210>)
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f3      	bne.n	8000a6e <main+0x56>
		}

		// armazenando valor de distancia do ciclo anterior
		dist_ctrl = distance;
 8000a86:	4b69      	ldr	r3, [pc, #420]	; (8000c2c <main+0x214>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a69      	ldr	r2, [pc, #420]	; (8000c30 <main+0x218>)
 8000a8c:	6013      	str	r3, [r2, #0]
		//atualizando valor de distancia
	 	distance = (tempo+0.0f)*coef*0.0343/2;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	ee07 3a90 	vmov	s15, r3
 8000a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a98:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8000c34 <main+0x21c>
 8000a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aa0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000c38 <main+0x220>
 8000aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aa8:	ee17 0a90 	vmov	r0, s15
 8000aac:	f7ff fcf8 	bl	80004a0 <__aeabi_f2d>
 8000ab0:	a35b      	add	r3, pc, #364	; (adr r3, 8000c20 <main+0x208>)
 8000ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab6:	f7ff fd4b 	bl	8000550 <__aeabi_dmul>
 8000aba:	4603      	mov	r3, r0
 8000abc:	460c      	mov	r4, r1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	4621      	mov	r1, r4
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aca:	f7ff fe6b 	bl	80007a4 <__aeabi_ddiv>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460c      	mov	r4, r1
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	4621      	mov	r1, r4
 8000ad6:	f7ff ff4d 	bl	8000974 <__aeabi_d2f>
 8000ada:	4602      	mov	r2, r0
 8000adc:	4b53      	ldr	r3, [pc, #332]	; (8000c2c <main+0x214>)
 8000ade:	601a      	str	r2, [r3, #0]

	 	// controle para evitar valores absurdos recebidos pelo uC
	 	if(distance-dist_ctrl > 30) distance=dist_ctrl;
 8000ae0:	4b52      	ldr	r3, [pc, #328]	; (8000c2c <main+0x214>)
 8000ae2:	ed93 7a00 	vldr	s14, [r3]
 8000ae6:	4b52      	ldr	r3, [pc, #328]	; (8000c30 <main+0x218>)
 8000ae8:	edd3 7a00 	vldr	s15, [r3]
 8000aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000af0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afc:	dd03      	ble.n	8000b06 <main+0xee>
 8000afe:	4b4c      	ldr	r3, [pc, #304]	; (8000c30 <main+0x218>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a4a      	ldr	r2, [pc, #296]	; (8000c2c <main+0x214>)
 8000b04:	6013      	str	r3, [r2, #0]

	 	// posicionamento da garra
	 	if(distance<3){
 8000b06:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <main+0x214>)
 8000b08:	edd3 7a00 	vldr	s15, [r3]
 8000b0c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b18:	d503      	bpl.n	8000b22 <main+0x10a>
	 		TIM4->CCR1=9;
 8000b1a:	4b48      	ldr	r3, [pc, #288]	; (8000c3c <main+0x224>)
 8000b1c:	2209      	movs	r2, #9
 8000b1e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b20:	e07a      	b.n	8000c18 <main+0x200>
	 	}
	 	else if(distance>=3 && distance<6){
 8000b22:	4b42      	ldr	r3, [pc, #264]	; (8000c2c <main+0x214>)
 8000b24:	edd3 7a00 	vldr	s15, [r3]
 8000b28:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b34:	db0d      	blt.n	8000b52 <main+0x13a>
 8000b36:	4b3d      	ldr	r3, [pc, #244]	; (8000c2c <main+0x214>)
 8000b38:	edd3 7a00 	vldr	s15, [r3]
 8000b3c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	d503      	bpl.n	8000b52 <main+0x13a>
	 		TIM4->CCR1=8;
 8000b4a:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <main+0x224>)
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b50:	e062      	b.n	8000c18 <main+0x200>
	 	}
	 	else if(distance>=6 && distance<9){
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <main+0x214>)
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b64:	db0d      	blt.n	8000b82 <main+0x16a>
 8000b66:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <main+0x214>)
 8000b68:	edd3 7a00 	vldr	s15, [r3]
 8000b6c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b78:	d503      	bpl.n	8000b82 <main+0x16a>
	 		TIM4->CCR1=7;
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <main+0x224>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b80:	e04a      	b.n	8000c18 <main+0x200>
	 	}
	 	else if(distance>=9 && distance<12){
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <main+0x214>)
 8000b84:	edd3 7a00 	vldr	s15, [r3]
 8000b88:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b94:	db0d      	blt.n	8000bb2 <main+0x19a>
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <main+0x214>)
 8000b98:	edd3 7a00 	vldr	s15, [r3]
 8000b9c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba8:	d503      	bpl.n	8000bb2 <main+0x19a>
	 		TIM4->CCR1=6;
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <main+0x224>)
 8000bac:	2206      	movs	r2, #6
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb0:	e032      	b.n	8000c18 <main+0x200>
	 	}
	 	else if(distance>=12 && distance<15){
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <main+0x214>)
 8000bb4:	edd3 7a00 	vldr	s15, [r3]
 8000bb8:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc4:	db0d      	blt.n	8000be2 <main+0x1ca>
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <main+0x214>)
 8000bc8:	edd3 7a00 	vldr	s15, [r3]
 8000bcc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd8:	d503      	bpl.n	8000be2 <main+0x1ca>
	 		TIM4->CCR1=5;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <main+0x224>)
 8000bdc:	2205      	movs	r2, #5
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34
 8000be0:	e01a      	b.n	8000c18 <main+0x200>
	 	}
	 	else if(distance>=15 && distance<18){
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <main+0x214>)
 8000be4:	edd3 7a00 	vldr	s15, [r3]
 8000be8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf4:	db0d      	blt.n	8000c12 <main+0x1fa>
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <main+0x214>)
 8000bf8:	edd3 7a00 	vldr	s15, [r3]
 8000bfc:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8000c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c08:	d503      	bpl.n	8000c12 <main+0x1fa>
	 		TIM4->CCR1=4;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <main+0x224>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c10:	e002      	b.n	8000c18 <main+0x200>
	 	}
	 	else{
	 		TIM4->CCR1=3;
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <main+0x224>)
 8000c14:	2203      	movs	r2, #3
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34
	 	}
		usdelay(300000);
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <main+0x228>)
 8000c1a:	f000 f813 	bl	8000c44 <usdelay>
		GPIOC->ODR &= ~(0x1<<1);
 8000c1e:	e704      	b.n	8000a2a <main+0x12>
 8000c20:	04816f00 	.word	0x04816f00
 8000c24:	3fa18fc5 	.word	0x3fa18fc5
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	2000001c 	.word	0x2000001c
 8000c30:	20000020 	.word	0x20000020
 8000c34:	00000000 	.word	0x00000000
 8000c38:	40333333 	.word	0x40333333
 8000c3c:	40000800 	.word	0x40000800
 8000c40:	000493e0 	.word	0x000493e0

08000c44 <usdelay>:
	}
}

void usdelay(uint32_t uSec)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= 0x1;	// habilitar clock em TIM2
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <usdelay+0x84>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <usdelay+0x84>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 16;			// TIM2 freq = 16MHz/16 = 1MHz
 8000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
	if(uSec < 2) uSec = 2;	// condicional para não haver valor negativo no registrador ARR na primeira iteração
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d801      	bhi.n	8000c6a <usdelay+0x26>
 8000c66:	2302      	movs	r3, #2
 8000c68:	607b      	str	r3, [r7, #4]
	TIM2->ARR = uSec - 1; 	// ARR dinâmico
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR = 1; 			// habilita reiniciar contagem
 8000c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c78:	2201      	movs	r2, #1
 8000c7a:	615a      	str	r2, [r3, #20]
	TIM2->SR &= ~1; 		// reseta a flag de overflow do contador
 8000c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c86:	f023 0301 	bic.w	r3, r3, #1
 8000c8a:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= 1; 		// habilita a contagem
 8000c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]
	while((TIM2->SR&0x0001) != 1);	// delay
 8000c9c:	bf00      	nop
 8000c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d1f8      	bne.n	8000c9e <usdelay+0x5a>
	TIM2->SR &= ~(0x0001);
 8000cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb6:	f023 0301 	bic.w	r3, r3, #1
 8000cba:	6113      	str	r3, [r2, #16]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40023800 	.word	0x40023800

08000ccc <init_gpio>:

void init_gpio ()
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	//GPIOA
	RCC->AHB1ENR |= 1;
	GPIOA->MODER |= 1<<10;
*/
	//GPIOC
	RCC->AHB1ENR |= 0x1<<2;
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <init_gpio+0x34>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <init_gpio+0x34>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER |= 0x1<<2;	//C1 OUTPUT
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <init_gpio+0x38>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <init_gpio+0x38>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(0x3);	// C0 INPUT
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <init_gpio+0x38>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <init_gpio+0x38>)
 8000cee:	f023 0303 	bic.w	r3, r3, #3
 8000cf2:	6013      	str	r3, [r2, #0]

}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020800 	.word	0x40020800

08000d08 <init_pwm>:
void init_pwm()
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	//configuracoes iniciais (GPIO AF, TIM4 clk)
	RCC->AHB1ENR |= 0x1<<1;		//GPIOB habilitar
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <init_pwm+0x94>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <init_pwm+0x94>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= (0x1<<2);	//clock TIM4
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <init_pwm+0x94>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a1f      	ldr	r2, [pc, #124]	; (8000d9c <init_pwm+0x94>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
	GPIOB->MODER |= 0x1<<13;	//config PB6 como AF
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <init_pwm+0x98>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1d      	ldr	r2, [pc, #116]	; (8000da0 <init_pwm+0x98>)
 8000d2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d2e:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= 0x1<<25;	//seleciona TIM3,4 e 5
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <init_pwm+0x98>)
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <init_pwm+0x98>)
 8000d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d3a:	6213      	str	r3, [r2, #32]

	//TIM config
	TIM4->CCMR1 |= 0xD<<3;		//PWM mode 1 e habilita preload
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <init_pwm+0x9c>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <init_pwm+0x9c>)
 8000d42:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000d46:	6193      	str	r3, [r2, #24]
	TIM4->CR1 |= 0x1<<7;		//habilita ARR preload buffer (load apos overflow)
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <init_pwm+0x9c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <init_pwm+0x9c>)
 8000d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d52:	6013      	str	r3, [r2, #0]
	TIM4->CCER |= 0x1;			//habilita output
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <init_pwm+0x9c>)
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <init_pwm+0x9c>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6213      	str	r3, [r2, #32]

	//frequencia pwm = 50hz
	TIM4->CNT = 0;		//limpando contador
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <init_pwm+0x9c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->PSC = 3200-1;	//prescaler 3200->50hz
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <init_pwm+0x9c>)
 8000d68:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 100-1;	//reload register
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <init_pwm+0x9c>)
 8000d70:	2263      	movs	r2, #99	; 0x63
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c

	//duty cycle
	TIM4->CCR1 = 0;
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <init_pwm+0x9c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34

	//habilitando do pwm
	TIM4->EGR |= 0x1;		//reinicializa a contagem apos overflow (UG)
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <init_pwm+0x9c>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <init_pwm+0x9c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= 0x1;	//habilita contagem
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <init_pwm+0x9c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <init_pwm+0x9c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40000800 	.word	0x40000800

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
//  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <SystemInit+0x28>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <SystemInit+0x28>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SystemInit+0x28>)
 8000e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e22:	609a      	str	r2, [r3, #8]
#endif
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e3a:	e003      	b.n	8000e44 <LoopCopyDataInit>

08000e3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e42:	3104      	adds	r1, #4

08000e44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e4c:	d3f6      	bcc.n	8000e3c <CopyDataInit>
  ldr  r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e50:	e002      	b.n	8000e58 <LoopFillZerobss>

08000e52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e54:	f842 3b04 	str.w	r3, [r2], #4

08000e58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e5c:	d3f9      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e5e:	f7ff ffd3 	bl	8000e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f000 f811 	bl	8000e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fdd7 	bl	8000a18 <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e6c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000e70:	08000ef0 	.word	0x08000ef0
  ldr  r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e78:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000e7c:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000e80:	20000024 	.word	0x20000024

08000e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>
	...

08000e88 <__libc_init_array>:
 8000e88:	b570      	push	{r4, r5, r6, lr}
 8000e8a:	4e0d      	ldr	r6, [pc, #52]	; (8000ec0 <__libc_init_array+0x38>)
 8000e8c:	4c0d      	ldr	r4, [pc, #52]	; (8000ec4 <__libc_init_array+0x3c>)
 8000e8e:	1ba4      	subs	r4, r4, r6
 8000e90:	10a4      	asrs	r4, r4, #2
 8000e92:	2500      	movs	r5, #0
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	d109      	bne.n	8000eac <__libc_init_array+0x24>
 8000e98:	4e0b      	ldr	r6, [pc, #44]	; (8000ec8 <__libc_init_array+0x40>)
 8000e9a:	4c0c      	ldr	r4, [pc, #48]	; (8000ecc <__libc_init_array+0x44>)
 8000e9c:	f000 f818 	bl	8000ed0 <_init>
 8000ea0:	1ba4      	subs	r4, r4, r6
 8000ea2:	10a4      	asrs	r4, r4, #2
 8000ea4:	2500      	movs	r5, #0
 8000ea6:	42a5      	cmp	r5, r4
 8000ea8:	d105      	bne.n	8000eb6 <__libc_init_array+0x2e>
 8000eaa:	bd70      	pop	{r4, r5, r6, pc}
 8000eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eb0:	4798      	blx	r3
 8000eb2:	3501      	adds	r5, #1
 8000eb4:	e7ee      	b.n	8000e94 <__libc_init_array+0xc>
 8000eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eba:	4798      	blx	r3
 8000ebc:	3501      	adds	r5, #1
 8000ebe:	e7f2      	b.n	8000ea6 <__libc_init_array+0x1e>
 8000ec0:	08000ee8 	.word	0x08000ee8
 8000ec4:	08000ee8 	.word	0x08000ee8
 8000ec8:	08000ee8 	.word	0x08000ee8
 8000ecc:	08000eec 	.word	0x08000eec

08000ed0 <_init>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	bf00      	nop
 8000ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed6:	bc08      	pop	{r3}
 8000ed8:	469e      	mov	lr, r3
 8000eda:	4770      	bx	lr

08000edc <_fini>:
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ede:	bf00      	nop
 8000ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ee2:	bc08      	pop	{r3}
 8000ee4:	469e      	mov	lr, r3
 8000ee6:	4770      	bx	lr
